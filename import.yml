---
- name: Export config as code info from AWX, AAP, or Ascender
  #hosts: save-files
  hosts: localhost
  gather_facts: false
  vars:
    controller_configuration_inventories_enforce_defaults: true
  
    export_objects: 
      - testing_value
#      - applications #failed
#      - credentials #some work some fail
      - credential_types #works
#      - execution_environments #failed conditional
#      - inventory #works
#      - inventory_sources #fails
#      - job_templates
#      - notification_templates
#      - organizations #fails
#      - projects #fails
#      - schedules #fails
#      - teams #works
#      - users #works
#      - workflow_job_templates
  
  environment:
    CONTROLLER_HOST: "https://{{ import_host }}"
    CONTROLLER_USERNAME: "{{ gen2_user }}"
    CONTROLLER_PASSWORD: "{{ gen2_pword }}"
    CONTROLLER_VERIFY_SSL: False

  tasks:
  - name: Include vars from config folder
    ansible.builtin.include_vars:
      # file: inventory.yml
      dir: configs

  - name: Filter out users we don't want imported
    when: users is defined
    set_fact:
      users: "{{ users | rejectattr('natural_key.username', 'equalto', 'admin') | list }}"
 

  - name: debug data
    ansible.builtin.debug:
      # var: inventory.variables
      var: export_objects

  - name: Add Credentials
    awx.awx.credential:
      name:                           "{{ __controller_credentials_item.name | mandatory }}"
      new_name:                       "{{ __controller_credentials_item.new_name | default(omit, true) }}"
      copy_from:                      "{{ __controller_credentials_item.copy_from | default(omit, true) }}"
      description:                    "{{ __controller_credentials_item.description | default(('' if controller_configuration_credentials_enforce_defaults else omit), true) }}"
      organization:                   "{{ __controller_credentials_item.organization.name | default(__controller_credentials_item.organization | default(('' if controller_configuration_credentials_enforce_defaults else omit), true)) }}"
      credential_type:                "{{ __controller_credentials_item.credential_type.name | default(__controller_credentials_item.credential_type | mandatory ) }}"
      inputs:                         "{{ __controller_credentials_item.inputs | default(({} if controller_configuration_credentials_enforce_defaults else omit), true) }}"
      user:                           "{{ __controller_credentials_item.user.username | default(__controller_credentials_item.user | default(('' if controller_configuration_credentials_enforce_defaults else omit), true)) }}"
      team:                           "{{ __controller_credentials_item.team.name | default(__controller_credentials_item.team | default(('' if controller_configuration_credentials_enforce_defaults else omit), true)) }}"
      update_secrets:                 "{{ __controller_credentials_item.update_secrets | default(true if controller_configuration_credentials_enforce_defaults else omit) }}"
      state:                          "{{ __controller_credentials_item.state | default(controller_state | default('present')) }}"

    loop: "{{ credentials if credentials is defined else controller_credentials }}"
    loop_control:
      loop_var: __controller_credentials_item
      label: "{{ __controller_credentials_item.name | mandatory }}"
    #no_log: "{{ controller_configuration_credentials_secure_logging }}"
#    async: 1000
 #   poll: 0
    register: __credentials_job_async
    changed_when: not __credentials_job_async.changed
    vars:
#    ansible_async_dir: '{{ controller_configuration_async_dir }}'
      controller_configuration_credentials_enforce_defaults: false
    ignore_errors: true
    
  - name: Add organizations
    when: item == "organizations"
    ansible.builtin.include_role:
      name: organizations
    loop: "{{ export_objects }}"

  - name: Add teams
    when: item == "teams"
    ansible.builtin.include_role:
      name: teams
    loop: "{{ export_objects }}"

  - name: Add users
    when: item == "users"
    ansible.builtin.include_role:
      name: users
    loop: "{{ export_objects }}"

  - name: Add credential types
    when: item == "credential_types"
    ansible.builtin.include_role:
      name: credential_types
    loop: "{{ export_objects }}"

  - name: Add credentials
    when: item == "credentials"
    ansible.builtin.include_role:
      name: credentials
    loop: "{{ export_objects }}"

  - name: Add inventory
    when: item == "inventory"
    ansible.builtin.include_role:
      # name: infra.controller_configuration.inventories
      name: inventories
    loop: "{{ export_objects }}"

  - name: Add inventory sources
    when: item == "inventory_sources"
    ansible.builtin.include_role:
      name: inventory_sources
    loop: "{{ export_objects }}"

  - name: Add applications
    when: item == "applications"
    ansible.builtin.include_role:
      name: applications
    loop: "{{ export_objects }}"

  - name: Add execution_environments
    when: item == "execution_environments"
    ansible.builtin.include_role:
      name: execution_environments
    loop: "{{ export_objects }}"

  - name: Add projects
    when: item == "projects"
    ansible.builtin.include_role:
      name: projects
    loop: "{{ export_objects }}"

  - name: Add schedules
    when: item == "schedules"
    ansible.builtin.include_role:
      name: schedules
    loop: "{{ export_objects }}"

  - name: Add job_templates
    when: item == "job_templates"
    ansible.builtin.include_role:
      name: job_templates
    loop: "{{ export_objects }}"

  - name: Add workflow_job_templates
    when: item == "workflow_job_templates"
    ansible.builtin.include_role:
      name: workflow_job_templates
    loop: "{{ export_objects }}"

  - name: Add notification_templates
    when: item == "notification_templates"
    ansible.builtin.include_role:
      name: notification_templates
    loop: "{{ export_objects }}"
