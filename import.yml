---
- name: Export config as code info from AWX, AAP, or Ascender
  #hosts: save-files
  hosts: localhost
  gather_facts: false
  vars:
    controller_configuration_inventories_enforce_defaults: true
  
    export_objects: 
      - testing_value
#      - applications #failed
#      - credentials #works
#      - credential_types #works
#      - execution_environments #failed if requires conditional
#      - projects #works
#      - inventory #works
#      - inventory_sources #works
#      - job_templates #works
#      - notification_templates #passed
      - organizations #works direct, fails with role?
#      - teams #works
#      - users #works
#      - workflow_job_templates #fails
#      - schedules #fails
  
  environment:
    CONTROLLER_HOST: "https://{{ import_host }}"
    CONTROLLER_USERNAME: "{{ gen2_user }}"
    CONTROLLER_PASSWORD: "{{ gen2_pword }}"
    CONTROLLER_VERIFY_SSL: False

  tasks:
  - name: check if credential-types file exists
    ansible.builtin.stat:
      path: "{{ playbook_dir }}/credential-types-fix.sh"
    register: cred_type_check

  - name: fix credential-types file block
    when: cred_type_check.stat.exists
    block:
    - name: Change file permissions on credential-type shell script
      ansible.builtin.file:
        path: "{{ playbook_dir }}/credential-types-fix.sh"
        mode: '0777'

    - name: use shell script to modify credentail types file
      ansible.builtin.shell: "{{ playbook_dir }}/credential-types-fix.sh {{ playbook_dir }}/configs/credential_types.yml"

  - name: Fix project file by removing null credentials
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/projects.yml"
      regexp: ' +credential: null'
      replace: ''

  - name: Include vars from config folder
    ansible.builtin.include_vars:
      # file: inventory.yml
      dir: configs

  - name: Job templates fix - remove nulls and comments from extra_vars
    set_fact:
      job_templates: >-
        {{
          job_templates + [
            {
              'name': item.name,
              'extra_vars': (
                item.extra_vars
                | regex_replace('^\\s*#.*?$', '', multiline=True)
                | regex_replace('\\s+', ' ')
                | trim
                if item.extra_vars != 'null' else omit
              )
            }
          ]
        }}
    loop: "{{ job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0

  - name: Job templates fix - convert extra_vars to dictionary
    set_fact:
      job_templates: >-
        {{
          job_templates | map('combine', {
            'extra_vars': (item.extra_vars | from_yaml if item.extra_vars != 'null' else {})
          }) | list
        }}
    loop: "{{ job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0

  - name: Workflow job templates fix - remove nulls and comments from extra_vars
    set_fact:
      workflow_job_templates: >-
        {{
          workflow_job_templates + [
            {
              'name': item.name,
              'extra_vars': (
                item.extra_vars
                | regex_replace('^\\s*#.*?$', '', multiline=True)
                | regex_replace('\\s+', ' ')
                | trim
                if item.extra_vars != 'null' else omit
              )
            }
          ]
        }}
    loop: "{{ workflow_job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0

  - name: Workflow job templates fix - convert extra_vars to dictionary
    set_fact:
      workflow_job_templates: >-
        {{
          workflow_job_templates | map('combine', {
            'extra_vars': (item.extra_vars | from_yaml if item.extra_vars != 'null' else {})
          }) | list
        }}
    loop: "{{ workflow_job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0


  # - name: Debug the modified job_templates
  #   debug:
  #     var: job_templates
      
  - name: Filter out users we don't want imported - user import fix
    when: users is defined
    set_fact:
      users: "{{ users | rejectattr('natural_key.username', 'equalto', 'admin') | list }}"

#   - name: Manage Workflows
#     awx.awx.workflow_job_template:
#       name:                               "{{ __workflow_loop_item.name | mandatory }}"
#       new_name:                           "{{ __workflow_loop_item.new_name | default(omit, true) }}"
#       copy_from:                          "{{ __workflow_loop_item.copy_from | default(omit, true) }}"
#       description:                        "{{ __workflow_loop_item.description | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       extra_vars:                         "{{ __workflow_loop_item.extra_vars | default(( {} if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       allow_simultaneous:                 "{{ __workflow_loop_item.allow_simultaneous | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       organization:                       "{{ __workflow_loop_item.organization.name | default(__workflow_loop_item.organization | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
#       ask_variables_on_launch:            "{{ __workflow_loop_item.ask_variables_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       inventory:                          "{{ __workflow_loop_item.inventory.name | default(__workflow_loop_item.inventory | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
#       limit:                              "{{ __workflow_loop_item.limit | default(( 0 if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       labels:                             "{{ (__workflow_loop_item.related.labels | map(attribute='name') | list if __workflow_loop_item.related.labels is defined) | default(__workflow_loop_item.labels) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       scm_branch:                         "{{ __workflow_loop_item.scm_branch | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       ask_inventory_on_launch:            "{{ __workflow_loop_item.ask_inventory_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       ask_scm_branch_on_launch:           "{{ __workflow_loop_item.ask_scm_branch_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       ask_limit_on_launch:                "{{ __workflow_loop_item.ask_limit_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       webhook_service:                    "{{ __workflow_loop_item.webhook_service | default(omit, true) }}"
#       webhook_credential:                 "{{ __workflow_loop_item.webhook_credential.name | default(__workflow_loop_item.webhook_credential | default(omit, true)) }}"
#       survey_enabled:                     "{{ __workflow_loop_item.survey_enabled | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       survey_spec:                        "{{ __workflow_loop_item.related.survey_spec | default(__workflow_loop_item.survey_spec | default(__workflow_loop_item.survey | default(( {} if controller_configuration_workflows_enforce_defaults else omit), true))) }}"
#       job_tags:                           "{{ __workflow_loop_item.job_tags | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       skip_tags:                          "{{ __workflow_loop_item.skip_tags | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       ask_tags_on_launch:                 "{{ __workflow_loop_item.ask_tags | default(__workflow_loop_item.ask_tags_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
#       ask_labels_on_launch:               "{{ __workflow_loop_item.ask_labels_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
#       ask_skip_tags_on_launch:            "{{ __workflow_loop_item.ask_skip_tags | default(__workflow_loop_item.ask_skip_tags_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
#       workflow_nodes:                     "{{ __workflow_loop_item.related.workflow_nodes | default(__workflow_loop_item.workflow_nodes | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
#       destroy_current_nodes:              "{{ __workflow_loop_item.destroy_current_nodes | default(__workflow_loop_item.destroy_current_schema | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
#       state:                              "{{ __workflow_loop_item.state | default(controller_state | default('present')) }}"
#       notification_templates_started:     "{{ (__workflow_loop_item.related.notification_templates_started | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_started is defined) | default(__workflow_loop_item.notification_templates_started) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       notification_templates_success:     "{{ (__workflow_loop_item.related.notification_templates_success | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_success is defined) | default(__workflow_loop_item.notification_templates_success) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       notification_templates_error:       "{{ (__workflow_loop_item.related.notification_templates_error | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_error is defined) | default(__workflow_loop_item.notification_templates_error) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
#       notification_templates_approvals:   "{{ (__workflow_loop_item.related.notification_templates_approvals | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_approvals is defined) | default(__workflow_loop_item.notification_templates_approvals) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"

#     loop: "{{ workflow_job_templates if workflow_job_templates is defined else controller_workflows }}"
#     loop_control:
#       loop_var: __workflow_loop_item
#     vars:
# #      ansible_async_dir: '{{ controller_configuration_async_dir }}'
#       controller_configuration_workflows_enforce_defaults: false

  # - name: debug data
  #   ansible.builtin.debug:
  #     # var: inventory.variables
  #     var: execution_environments
  #     #msg: "{{ credential_types }}"


  - name: Add organizations
    awx.awx.organization:
      name:                               "{{ __controller_organizations_item.name | mandatory }}"
      description:                        "{{ __controller_organizations_item.description | default(( '' if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      custom_virtualenv:                  "{{ __controller_organizations_item.custom_virtualenv | default(omit, true) }}"
      max_hosts:                          "{{ __controller_organizations_item.max_hosts | default(omit, true) }}"
      instance_groups:                    "{{ __controller_organizations_item.instance_groups | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      default_environment:                "{{ (__controller_organizations_item.default_environment.name | default(__controller_organizations_item.default_environment | default(__controller_organizations_item.execution_environment | default(omit)))) if (assign_default_ee_to_org is defined and assign_default_ee_to_org) else omit }}"
      galaxy_credentials:                 "{{ (__controller_organizations_item.galaxy_credentials | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true)) if (assign_galaxy_credentials_to_org is defined and assign_galaxy_credentials_to_org) else omit }}"
      notification_templates_approvals:    "{{ (__controller_organizations_item.related.notification_templates_approvals | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_approvals is defined) | default(__controller_organizations_item.notification_templates_approvals) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_started:     "{{ (__controller_organizations_item.related.notification_templates_started | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_started is defined) | default(__controller_organizations_item.notification_templates_started) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_success:     "{{ (__controller_organizations_item.related.notification_templates_success | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_success is defined) | default(__controller_organizations_item.notification_templates_success) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_error:       "{{ (__controller_organizations_item.related.notification_templates_error | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_error is defined) | default(__controller_organizations_item.notification_templates_error) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      state:                              "{{ __controller_organizations_item.state | default(controller_state | default('present')) }}"

    loop: "{{ organizations if organizations is defined else controller_organizations }}"
    loop_control:
      loop_var: __controller_organizations_item
    vars:
#      ansible_async_dir: '{{ controller_configuration_async_dir }}'
      controller_configuration_organizations_enforce_defaults: false

  - name: Add organizations
    when: item == "organizations"
    ansible.builtin.include_role:
      name: organizations
    loop: "{{ export_objects }}"
    vars:
      controller_configuration_organizations_enforce_defaults: true


  - name: Add teams
    when: item == "teams"
    ansible.builtin.include_role:
      name: teams
    loop: "{{ export_objects }}"

  - name: Add users
    when: item == "users"
    ansible.builtin.include_role:
      name: users
    loop: "{{ export_objects }}"

  - name: Add credential types
    when: item == "credential_types"
    ansible.builtin.include_role:
      name: credential_types
    loop: "{{ export_objects }}"

  - name: Add credentials
    when: item == "credentials"
    ansible.builtin.include_role:
      name: credentials
    loop: "{{ export_objects }}"

  - name: Add projects
    when: item == "projects"
    ansible.builtin.include_role:
      name: projects
    loop: "{{ export_objects }}"

  - name: Add inventory
    when: item == "inventory"
    ansible.builtin.include_role:
      # name: infra.controller_configuration.inventories
      name: inventories
    loop: "{{ export_objects }}"

  - name: Add inventory sources
    when: item == "inventory_sources"
    ansible.builtin.include_role:
      name: inventory_sources
    loop: "{{ export_objects }}"

  - name: Add applications
    when: item == "applications"
    ansible.builtin.include_role:
      name: applications
    loop: "{{ export_objects }}"

  - name: Add execution_environments
    when: item == "execution_environments"
    ansible.builtin.include_role:
      name: execution_environments
    loop: "{{ export_objects }}"
    vars:
      controller_execution_environments: 
        - food: tacos #weird conditional
          day: tuesday

  - name: Add job_templates
    when: item == "job_templates"
    ansible.builtin.include_role:
      name: job_templates
    loop: "{{ export_objects }}"

  - name: Add workflow_job_templates
    when: item == "workflow_job_templates"
    ansible.builtin.include_role:
      name: workflow_job_templates
    loop: "{{ export_objects }}"

  - name: Add notification_templates
    when: item == "notification_templates"
    ansible.builtin.include_role:
      name: notification_templates
    loop: "{{ export_objects }}"

  - name: Add schedules
    when: item == "schedules"
    ansible.builtin.include_role:
      name: schedules
    loop: "{{ export_objects }}"

