---
- name: Export config as code info from AWX, AAP, or Ascender
  #hosts: save-files
  hosts: localhost
  gather_facts: false
  vars:
    controller_configuration_inventories_enforce_defaults: true
  
    export_objects: 
#      - applications #failed
#      - credentials #some work some fail
#      - credential_types #works
#      - execution_environments #failed conditional
#      - inventory #works
#      - inventory_sources #fails
#      - job_templates
#      - notification_templates
#      - organizations #fails
#      - projects #fails
#      - schedules #fails
#      - teams #works
#      - users #fails
#      - workflow_job_templates
  
  environment:
    CONTROLLER_HOST: "https://{{ import_host }}"
    CONTROLLER_USERNAME: "{{ gen2_user }}"
    CONTROLLER_PASSWORD: "{{ gen2_pword }}"
    CONTROLLER_VERIFY_SSL: False

  tasks:
  - name: Include vars from config folder
    ansible.builtin.include_vars:
      # file: inventory.yml
      dir: configs

  - name: debug data
    ansible.builtin.debug:
      # var: inventory.variables
      var: organizations | list

  - name: Add organizations
    awx.awx.organization:
      name:                               "{{ __controller_organizations_item.name | mandatory }}"
      description:                        "{{ __controller_organizations_item.description | default(( '' if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      custom_virtualenv:                  "{{ __controller_organizations_item.custom_virtualenv | default(omit, true) }}"
      max_hosts:                          "{{ __controller_organizations_item.max_hosts | default(omit, true) }}"
      instance_groups:                    "{{ __controller_organizations_item.instance_groups | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      default_environment:                "{{ (__controller_organizations_item.default_environment.name | default(__controller_organizations_item.default_environment | default(__controller_organizations_item.execution_environment | default(omit)))) if (assign_default_ee_to_org is defined and assign_default_ee_to_org) else omit }}"
      galaxy_credentials:                 "{{ (__controller_organizations_item.galaxy_credentials | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true)) if (assign_galaxy_credentials_to_org is defined and assign_galaxy_credentials_to_org) else omit }}"
      notification_templates_approvals:    "{{ (__controller_organizations_item.related.notification_templates_approvals | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_approvals is defined) | default(__controller_organizations_item.notification_templates_approvals) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_started:     "{{ (__controller_organizations_item.related.notification_templates_started | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_started is defined) | default(__controller_organizations_item.notification_templates_started) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_success:     "{{ (__controller_organizations_item.related.notification_templates_success | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_success is defined) | default(__controller_organizations_item.notification_templates_success) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      notification_templates_error:       "{{ (__controller_organizations_item.related.notification_templates_error | map(attribute='name') | list if __controller_organizations_item.related.notification_templates_error is defined) | default(__controller_organizations_item.notification_templates_error) | default(( [] if controller_configuration_organizations_enforce_defaults else omit), true) }}"
      state:                              "{{ __controller_organizations_item.state | default(controller_state | default('present')) }}"

    loop: "{{ organizations if organizations is defined else controller_organizations }}"
    loop_control:
      loop_var: __controller_organizations_item
#    no_log: "{{ controller_configuration_organizations_secure_logging }}"
#    async: 1000
#    poll: 0
    register: __organizations_job_async
    changed_when: not __organizations_job_async.changed
    vars:
      #ansible_async_dir: '{{ controller_configuration_async_dir }}'
      controller_configuration_organizations_enforce_defaults: false
      
  - name: Add organizations
    when: item == "organizations"
    ansible.builtin.include_role:
      name: organizations
    loop: "{{ export_objects }}"

  - name: Add teams
    when: item == "teams"
    ansible.builtin.include_role:
      name: teams
    loop: "{{ export_objects }}"

  - name: Add users
    when: item == "users"
    ansible.builtin.include_role:
      name: users
    loop: "{{ export_objects }}"

  - name: Add credential types
    when: item == "credential_types"
    ansible.builtin.include_role:
      name: credential_types
    loop: "{{ export_objects }}"

  - name: Add credentials
    when: item == "credentials"
    ansible.builtin.include_role:
      name: credentials
    loop: "{{ export_objects }}"

  - name: Add inventory
    when: item == "inventory"
    ansible.builtin.include_role:
      # name: infra.controller_configuration.inventories
      name: inventories
    loop: "{{ export_objects }}"

  - name: Add inventory sources
    when: item == "inventory_sources"
    ansible.builtin.include_role:
      name: inventory_sources
    loop: "{{ export_objects }}"

  - name: Add applications
    when: item == "applications"
    ansible.builtin.include_role:
      name: applications
    loop: "{{ export_objects }}"

  - name: Add execution_environments
    when: item == "execution_environments"
    ansible.builtin.include_role:
      name: execution_environments
    loop: "{{ export_objects }}"

  - name: Add projects
    when: item == "projects"
    ansible.builtin.include_role:
      name: projects
    loop: "{{ export_objects }}"

  - name: Add schedules
    when: item == "schedules"
    ansible.builtin.include_role:
      name: schedules
    loop: "{{ export_objects }}"

  - name: Add job_templates
    when: item == "job_templates"
    ansible.builtin.include_role:
      name: job_templates
    loop: "{{ export_objects }}"

  - name: Add workflow_job_templates
    when: item == "workflow_job_templates"
    ansible.builtin.include_role:
      name: workflow_job_templates
    loop: "{{ export_objects }}"

  - name: Add notification_templates
    when: item == "notification_templates"
    ansible.builtin.include_role:
      name: notification_templates
    loop: "{{ export_objects }}"
