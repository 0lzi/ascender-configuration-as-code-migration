---
- name: Export config as code info from AWX, AAP, or Ascender
  #hosts: save-files
  hosts: localhost
  gather_facts: false
  vars:
    controller_configuration_inventories_enforce_defaults: true
  
    export_objects: 
      - testing_value
#      - applications #failed
#      - credentials #works
#      - credential_types #works
#      - execution_environments #failed conditional
      - projects #works
#      - inventory #works
#      - inventory_sources #fails Needs Projects first
#      - job_templates
#      - notification_templates
#      - organizations #fails
#      - schedules #fails
#      - teams #works
#      - users #works
#      - workflow_job_templates
  
  environment:
    CONTROLLER_HOST: "https://{{ import_host }}"
    CONTROLLER_USERNAME: "{{ gen2_user }}"
    CONTROLLER_PASSWORD: "{{ gen2_pword }}"
    CONTROLLER_VERIFY_SSL: False

  tasks:
  - name: check if credential-types file exists
    ansible.builtin.stat:
      path: "{{ playbook_dir }}/credential-types-fix.sh"
    register: cred_type_check

  - name: fix credential-types file block
    when: cred_type_check.stat.exists
    block:
    - name: Change file permissions on credential-type shell script
      ansible.builtin.file:
        path: "{{ playbook_dir }}/credential-types-fix.sh"
        mode: '0777'

    - name: use shell script to modify credentail types file
      ansible.builtin.shell: "{{ playbook_dir }}/credential-types-fix.sh {{ playbook_dir }}/configs/credential_types.yml"

  - name: Fix project file by removing null credentials
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/projects.yml"
      regexp: ' +credential: null'
      replace: ''

  # - name: grab file contents
  #   ansible.builtin.shell: "cat {{ playbook_dir }}/configs/projects.yml"
  #   register: file_grab

  - name: Include vars from config folder
    ansible.builtin.include_vars:
      # file: inventory.yml
      dir: configs

  - name: Filter out users we don't want imported - user import fix
    when: users is defined
    set_fact:
      users: "{{ users | rejectattr('natural_key.username', 'equalto', 'admin') | list }}"



#   - name: debug data
#     ansible.builtin.debug:
#       # var: inventory.variables
#       var: projects
#       #msg: "{{ credential_types }}"


  - name: Add an inventory source
    awx.awx.inventory_source:
      name:                                 "{{ __controller_source_item.name | mandatory }}"
      new_name:                             "{{ __controller_source_item.new_name | default(omit, true) }}"
      description:                          "{{ __controller_source_item.description | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      inventory:                            "{{ __controller_source_item.inventory.name | default(__controller_source_item.inventory) | mandatory }}"
      organization:                         "{{ __controller_source_item.inventory.organization.name | default(__controller_source_item.organization | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true)) }}"
      source:                               "{{ __controller_source_item.source | default(( 'scm' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      source_path:                          "{{ __controller_source_item.source_path | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      source_vars:                          "{{ __controller_source_item.source_vars | default(( {} if controller_configuration_inventory_sources_enforce_defaults else omit), true) | regex_replace('[ ]{2,}', '') }}"
      enabled_var:                          "{{ __controller_source_item.enabled_var | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      enabled_value:                        "{{ __controller_source_item.enabled_value | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      host_filter:                          "{{ __controller_source_item.host_filter | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      limit:                                "{{ __controller_source_item.limit | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      credential:                           "{{ __controller_source_item.credential | default(omit, true) }}"
      execution_environment:                "{{ __controller_source_item.execution_environment | default(omit, true) }}"
      overwrite:                            "{{ __controller_source_item.overwrite | default(( false if controller_configuration_inventory_sources_enforce_defaults else omit)) }}"
      overwrite_vars:                       "{{ __controller_source_item.overwrite_vars | default(( false if controller_configuration_inventory_sources_enforce_defaults else omit)) }}"
      custom_virtualenv:                    "{{ __controller_source_item.custom_virtualenv | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      timeout:                              "{{ __controller_source_item.timeout | default(( 0 if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      verbosity:                            "{{ __controller_source_item.verbosity | default(( 1 if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      update_on_launch:                     "{{ __controller_source_item.update_on_launch | default(( false if controller_configuration_inventory_sources_enforce_defaults else omit)) }}"
      update_cache_timeout:                 "{{ __controller_source_item.update_cache_timeout | default(( 0 if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      source_project:                       "{{ __controller_source_item.source_project.name | default(__controller_source_item.source_project | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true)) }}"
      scm_branch:                           "{{ __controller_source_item.scm_branch | default(( '' if controller_configuration_inventory_sources_enforce_defaults else omit), true ) }}"
      state:                                "{{ __controller_source_item.state | default(controller_state | default('present')) }}"
      notification_templates_started:       "{{ (__controller_source_item.related.notification_templates_started | map(attribute='name') | list if __controller_source_item.related.notification_templates_started is defined) | default(__controller_source_item.notification_templates_started) | default(( [] if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      notification_templates_success:       "{{ (__controller_source_item.related.notification_templates_success | map(attribute='name') | list if __controller_source_item.related.notification_templates_success is defined) | default(__controller_source_item.notification_templates_success) | default(( [] if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"
      notification_templates_error:         "{{ (__controller_source_item.related.notification_templates_error | map(attribute='name') | list if __controller_source_item.related.notification_templates_error is defined) | default(__controller_source_item.notification_templates_error) | default(( [] if controller_configuration_inventory_sources_enforce_defaults else omit), true) }}"

    loop: "{{ inventory_sources if inventory_sources is defined else controller_inventory_sources }}"
    loop_control:
      loop_var: __controller_source_item
    vars:
#      ansible_async_dir: '{{ controller_configuration_async_dir }}'
      controller_configuration_inventory_sources_enforce_defaults: true

  - name: Add organizations
    when: item == "organizations"
    ansible.builtin.include_role:
      name: organizations
    loop: "{{ export_objects }}"

  - name: Add teams
    when: item == "teams"
    ansible.builtin.include_role:
      name: teams
    loop: "{{ export_objects }}"

  - name: Add users
    when: item == "users"
    ansible.builtin.include_role:
      name: users
    loop: "{{ export_objects }}"

  - name: Add credential types
    when: item == "credential_types"
    ansible.builtin.include_role:
      name: credential_types
    loop: "{{ export_objects }}"

  - name: Add credentials
    when: item == "credentials"
    ansible.builtin.include_role:
      name: credentials
    loop: "{{ export_objects }}"

  - name: Add inventory
    when: item == "inventory"
    ansible.builtin.include_role:
      # name: infra.controller_configuration.inventories
      name: inventories
    loop: "{{ export_objects }}"

  - name: Add inventory sources
    when: item == "inventory_sources"
    ansible.builtin.include_role:
      name: inventory_sources
    loop: "{{ export_objects }}"

  - name: Add applications
    when: item == "applications"
    ansible.builtin.include_role:
      name: applications
    loop: "{{ export_objects }}"

  - name: Add execution_environments
    when: item == "execution_environments"
    ansible.builtin.include_role:
      name: execution_environments
    loop: "{{ export_objects }}"

  - name: Add projects
    when: item == "projects"
    ansible.builtin.include_role:
      name: projects
    loop: "{{ export_objects }}"

  - name: Add schedules
    when: item == "schedules"
    ansible.builtin.include_role:
      name: schedules
    loop: "{{ export_objects }}"

  - name: Add job_templates
    when: item == "job_templates"
    ansible.builtin.include_role:
      name: job_templates
    loop: "{{ export_objects }}"

  - name: Add workflow_job_templates
    when: item == "workflow_job_templates"
    ansible.builtin.include_role:
      name: workflow_job_templates
    loop: "{{ export_objects }}"

  - name: Add notification_templates
    when: item == "notification_templates"
    ansible.builtin.include_role:
      name: notification_templates
    loop: "{{ export_objects }}"
