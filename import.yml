---
- name: Import config as code info to AWX, AAP, or Ascender
  hosts: localhost
  gather_facts: false
  vars:
    #import host is the server name for the host I'm placing the new configs ones
    #I have it commented out because I'm supplying this via extra_vars
    #import_host: new-server.gregsowell.com

    controller_configuration_inventories_enforce_defaults: true

    #add hosts and or groups when adding/updating inventories
    #by default inventories won't import hosts/groups, so setting these variables will control that.
    add_hosts: true
    add_groups: true

    #these are the objects you want to import into the server
    export_objects: 
      - testing_value
      - applications 
      - credentials 
      - credential_types 
      - execution_environments
      - projects 
      - inventory
      - inventory_sources
      - job_templates
      - notification_templates 
      - organizations 
      - teams 
      - users 
      - workflow_job_templates
      - schedules 
  
  # setting up some env variables for connecting to the automation server
  environment:
    CONTROLLER_HOST: "https://{{ import_host }}"
    CONTROLLER_USERNAME: "{{ gen2_user }}"
    CONTROLLER_PASSWORD: "{{ gen2_pword }}"
    CONTROLLER_VERIFY_SSL: False

  tasks:
  # the following tasks are making modifications to the config as code(cac) yaml files.
  # the existing modules and roles are using some old formatting of the default export
  # so some modification is required.
  - name: Change file permissions on credential-type shell script
    when: item == "credential_types"
    ansible.builtin.file:
      path: "{{ playbook_dir }}/credential-types-fix.sh"
      mode: '0777'
    loop: "{{ export_objects }}"

  - name: use shell script to modify credentail types file
    when: item == "credential_types"
    ansible.builtin.shell: "{{ playbook_dir }}/credential-types-fix.sh {{ playbook_dir }}/configs/credential_types.yml"
    loop: "{{ export_objects }}"

  - name: Fix credentials file by removing password fields
    when: item == "credentials"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/credentials.yml"
      regexp: '.*password:.*'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix wokflow job templates by removing any lines with null
    when: item == "workflow_job_templates"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/workflow_job_templates.yml"
      regexp: '.*null.*\n'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix schedules by removing any lines with null
    when: item == "schedules"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/schedules.yml"
      regexp: '.*null.*\n'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix project file by removing null credentials
    when: item == "credentials"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/projects.yml"
      regexp: ' +credential: null'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix organizations by removing empty EE entries
    when: item == "organizations"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/organizations.yml"
      regexp: ' +execution_environments: \[\]'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix organizations by removing null default environment
    when: item == "organizations"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/organizations.yml"
      regexp: ' +default_environment: null'
      replace: ''
    loop: "{{ export_objects }}"

  - name: Fix execution environments file by removing null organizations
    when: item == "execution_environments"
    ansible.builtin.replace:
      path: "{{ playbook_dir }}/configs/execution_environments.yml"
      regexp: ' +organization: null'
      replace: ''
    loop: "{{ export_objects }}"

############# variable file imports
  # this imports the variable files from the configs directory
  - name: Include vars from config folder
    ansible.builtin.include_vars:
      dir: configs
####################################

  # the following tasks are modifying the imported variables.
  # some were easier to modify as files, and some were easier once they were variables.
  - name: Fix schedules variable - Filter out schedules based on provided names - system default schedules
    when: schedules is defined
    set_fact:
      schedules: "{{ schedules | rejectattr('name', 'in', schedules_to_remove) | list }}"
    vars:
      # List of schedule names to remove - all system default ones
      schedules_to_remove: 
        - 'Cleanup Job Schedule'
        - 'Cleanup Activity Schedule'
        - 'Cleanup Expired Sessions'
        - 'Cleanup Expired OAuth 2 Tokens'

  - name: Job templates fix - remove nulls and comments from extra_vars
    set_fact:
      job_templates: >-
        {{
          job_templates + [
            {
              'name': item.name,
              'extra_vars': (
                item.extra_vars
                | regex_replace('^\\s*#.*?$', '', multiline=True)
                | regex_replace('\\s+', ' ')
                | trim
                if item.extra_vars != 'null' else omit
              )
            }
          ]
        }}
    loop: "{{ job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0 and job_templates is defined
    #output his huge otherwise, so no log to keep it small
    no_log: true 

  - name: Job templates fix - Initialize an empty list for updated job templates
    set_fact:
      updated_job_templates: []
    when: job_templates is defined

  - name: Job templates fix - Convert extra_vars in each job template to a dictionary
    set_fact:
      updated_job_templates: "{{ updated_job_templates + [item | combine({'extra_vars': (item.extra_vars | from_yaml | default({}, true))})] }}"
    loop: "{{ job_templates }}"
    when: item.extra_vars is defined and item.extra_vars | length > 0 and job_templates is defined

  - name: Job templates fix - Overwrite job_templates with the updated list
    set_fact:
      job_templates: "{{ updated_job_templates }}"
    when: updated_job_templates is defined

  - name: Workflow job templates fix - remove nulls and comments from extra_vars
    set_fact:
      workflow_job_templates: >-
        {{
          workflow_job_templates + [
            {
              'name': item.name,
              'extra_vars': (
                item.extra_vars
                | regex_replace('^\\s*#.*?$', '', multiline=True)
                | regex_replace('\\s+', ' ')
                | trim
                if item.extra_vars != 'null' else omit
              )
            }
          ]
        }}
    loop: "{{ workflow_job_templates }}"
    when: item.extra_vars is string and item.extra_vars | length > 0 and workflow_job_templates is defined
    #output his huge otherwise, so no log to keep it small
    no_log: true 

  - name: Workflow job templates fix -  Initialize an empty list for updated job templates
    set_fact:
      updated_workflow_job_templates: []
    when: workflow_job_templates is defined

  - name: Workflow job templates fix -  Convert extra_vars in each job template to a dictionary
    set_fact:
      updated_workflow_job_templates: "{{ updated_workflow_job_templates + [item | combine({'extra_vars': (item.extra_vars | from_yaml | default({}, true))})] }}"
    loop: "{{ workflow_job_templates }}"
    when: item.extra_vars is defined and item.extra_vars | length > 0 and updated_workflow_job_templates is defined

  - name: Workflow job templates fix -  Overwrite job_templates with the updated list
    set_fact:
      workflow_job_templates: "{{ updated_workflow_job_templates }}"
    when: updated_workflow_job_templates is defined


  - name: Filter out users we don't want imported - user import fix
    when: users is defined
    set_fact:
      users: "{{ users | rejectattr('natural_key.username', 'equalto', item) | list }}"
    loop:
      - admin

  - name: Reformat the organization entry in applications variable to fix applications.  role formatting is old and needs fixing, but this is a workaround
    when: applications is defined
    set_fact:
      applications: "{{ applications | json_query(query) }}"
    vars:
      query: "[].{authorization_grant_type: authorization_grant_type, client_type: client_type, description: description, name: name, natural_key: natural_key, organization: organization.name, redirect_uris: redirect_uris, skip_authorization: skip_authorization}"

  - name: Fix EEs by modifying the credential field in the execution_environments variable.  The module doesn't recognize the current format
    when: item.credential.name is defined and execution_environments is defined
    set_fact:
      execution_environments: "{{ execution_environments | map('combine', {'credential': item.credential.name}) | list }}"
    loop: "{{ execution_environments }}"

  - name: Create controller_hosts variable - Initialize controller_hosts
    when: inventory is defined
    set_fact:
      controller_hosts: []

  - name: Create controller_hosts variable - Extract and format hosts from inventory
    when: inventory is defined
    include_tasks: extract_hosts.yml
    loop: "{{ inventory }}"
    loop_control:
      loop_var: inventory_item
    # really noisy, so use no_log to keep it quieter
    no_log: true

  - name: Create controller_hosts variable - Flatten controller_hosts list
    when: inventory is defined
    set_fact:
      controller_hosts: "{{ controller_hosts | flatten }}"

  - name: Create controller_groups variable - Initialize controller_groups
    when: inventory is defined
    set_fact:
      controller_groups: []

  - name: Create controller_groups variable - Extract and format hosts from inventory
    when: inventory is defined
    include_tasks: extract_groups.yml
    loop: "{{ inventory }}"
    loop_control:
      loop_var: inventory_item
    # really noisy, so use no_log to keep it quieter
    no_log: true

  - name: Create controller_groups variable - Flatten controller_groups list
    when: inventory is defined
    set_fact:
      controller_groups: "{{ controller_groups | flatten }}"

  - name: Debug a var
    debug:
      var: workflow_job_templates

####### start importing various information
  - name: Manage Workflows
    awx.awx.workflow_job_template:
      name:                               "{{ __workflow_loop_item.name | mandatory }}"
      new_name:                           "{{ __workflow_loop_item.new_name | default(omit, true) }}"
      copy_from:                          "{{ __workflow_loop_item.copy_from | default(omit, true) }}"
      description:                        "{{ __workflow_loop_item.description | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      extra_vars:                         "{{ __workflow_loop_item.extra_vars | default(( {} if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      allow_simultaneous:                 "{{ __workflow_loop_item.allow_simultaneous | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      organization:                       "{{ __workflow_loop_item.organization.name | default(__workflow_loop_item.organization | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
      ask_variables_on_launch:            "{{ __workflow_loop_item.ask_variables_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      inventory:                          "{{ __workflow_loop_item.inventory.name | default(__workflow_loop_item.inventory | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
      limit:                              "{{ __workflow_loop_item.limit | default(( 0 if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      labels:                             "{{ (__workflow_loop_item.related.labels | map(attribute='name') | list if __workflow_loop_item.related.labels is defined) | default(__workflow_loop_item.labels) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      scm_branch:                         "{{ __workflow_loop_item.scm_branch | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      ask_inventory_on_launch:            "{{ __workflow_loop_item.ask_inventory_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      ask_scm_branch_on_launch:           "{{ __workflow_loop_item.ask_scm_branch_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      ask_limit_on_launch:                "{{ __workflow_loop_item.ask_limit_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      webhook_service:                    "{{ __workflow_loop_item.webhook_service | default(omit, true) }}"
      webhook_credential:                 "{{ __workflow_loop_item.webhook_credential.name | default(__workflow_loop_item.webhook_credential | default(omit, true)) }}"
      survey_enabled:                     "{{ __workflow_loop_item.survey_enabled | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      survey_spec:                        "{{ __workflow_loop_item.related.survey_spec | default(__workflow_loop_item.survey_spec | default(__workflow_loop_item.survey | default(( {} if controller_configuration_workflows_enforce_defaults else omit), true))) }}"
      job_tags:                           "{{ __workflow_loop_item.job_tags | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      skip_tags:                          "{{ __workflow_loop_item.skip_tags | default(( '' if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      ask_tags_on_launch:                 "{{ __workflow_loop_item.ask_tags | default(__workflow_loop_item.ask_tags_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
      ask_labels_on_launch:               "{{ __workflow_loop_item.ask_labels_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit)) }}"
      ask_skip_tags_on_launch:            "{{ __workflow_loop_item.ask_skip_tags | default(__workflow_loop_item.ask_skip_tags_on_launch | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
      workflow_nodes:                     "{{ __workflow_loop_item.related.workflow_nodes | default(__workflow_loop_item.workflow_nodes | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true)) }}"
      destroy_current_nodes:              "{{ __workflow_loop_item.destroy_current_nodes | default(__workflow_loop_item.destroy_current_schema | default(( false if controller_configuration_workflows_enforce_defaults else omit))) }}"
      state:                              "{{ __workflow_loop_item.state | default(controller_state | default('present')) }}"
      notification_templates_started:     "{{ (__workflow_loop_item.related.notification_templates_started | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_started is defined) | default(__workflow_loop_item.notification_templates_started) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      notification_templates_success:     "{{ (__workflow_loop_item.related.notification_templates_success | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_success is defined) | default(__workflow_loop_item.notification_templates_success) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      notification_templates_error:       "{{ (__workflow_loop_item.related.notification_templates_error | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_error is defined) | default(__workflow_loop_item.notification_templates_error) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"
      notification_templates_approvals:   "{{ (__workflow_loop_item.related.notification_templates_approvals | map(attribute='name') | list if __workflow_loop_item.related.notification_templates_approvals is defined) | default(__workflow_loop_item.notification_templates_approvals) | default(( [] if controller_configuration_workflows_enforce_defaults else omit), true) }}"

    loop: "{{ workflow_job_templates if workflow_job_templates is defined else controller_workflows }}"
    loop_control:
      loop_var: __workflow_loop_item
    vars:
#      ansible_async_dir: '{{ controller_configuration_async_dir }}'
      controller_configuration_workflows_enforce_defaults: false


  - name: block and rescue for multiple attempts
    block:
    - name: Add credential types
      when: item == "credential_types"
      ansible.builtin.include_role:
        name: credential_types
      loop: "{{ export_objects }}"
    rescue:
    - name: Add credential types - second attempt
      ansible.builtin.include_role:
        name: credential_types

  - name: block and rescue for multiple attempts
    block:
    - name: Add credentials
      when: item == "credentials"
      ansible.builtin.include_role:
        name: credentials
      loop: "{{ export_objects }}"
    rescue:
    - name: Add credentials - second attempt
      ansible.builtin.include_role:
        name: credentials

  - name: block and rescue for multiple attempts
    block:
    - name: Add execution_environments
      when: item == "execution_environments"
      ansible.builtin.include_role:
        name: execution_environments
      loop: "{{ export_objects }}"
      vars:
        controller_execution_environments: 
          - food: tacos #weird conditional they check for in the role(error in role)
            day: tuesday
    rescue:
    - name: Add execution_environments - second attempt
      ansible.builtin.include_role:
        name: execution_environments
      vars:
        controller_execution_environments: 
          - food: tacos #weird conditional they check for in the role(error in role)
            day: tuesday

  - name: block and rescue for multiple attempts
    block:
    - name: Add organizations
      when: item == "organizations"
      ansible.builtin.include_role:
        name: organizations
      loop: "{{ export_objects }}"
    rescue:
    - name: Add organizations
      ansible.builtin.include_role:
        name: organizations

  - name: block and rescue for multiple attempts
    block:
    - name: Add teams
      when: item == "teams"
      ansible.builtin.include_role:
        name: teams
      loop: "{{ export_objects }}"
    rescue:
    - name: Add teams - second attempt
      ansible.builtin.include_role:
        name: teams

  - name: block and rescue for multiple attempts
    block:
    - name: Add users
      when: item == "users"
      ansible.builtin.include_role:
        name: users
      loop: "{{ export_objects }}"
    rescue:
    - name: Add users - second attempt
      ansible.builtin.include_role:
        name: users

  - name: block and rescue for multiple attempts
    block:
    - name: Add projects
      when: item == "projects"
      ansible.builtin.include_role:
        name: projects
      loop: "{{ export_objects }}"
    rescue:
    - name: Add projects - second attempt
      ansible.builtin.include_role:
        name: projects

  - name: block and rescue for multiple attempts
    block:
    - name: Add inventory
      when: item == "inventory"
      ansible.builtin.include_role:
        name: inventories
      loop: "{{ export_objects }}"
    rescue:
    - name: Add inventory - second attempt
      ansible.builtin.include_role:
        name: inventories

  - name: block and rescue for multiple attempts
    block:
    - name: Add inventory sources
      when: item == "inventory_sources"
      ansible.builtin.include_role:
        name: inventory_sources
      loop: "{{ export_objects }}"
    rescue:
    - name: Add inventory sources - second attempt
      ansible.builtin.include_role:
        name: inventory_sources

  - name: block and rescue for multiple attempts
    block:
    - name: Add hosts
      when: item == "inventory" and add_hosts
      ansible.builtin.include_role:
        name: hosts
      loop: "{{ export_objects }}"
    rescue:
    - name: Add hosts - second attempt
      ansible.builtin.include_role:
        name: hosts

  - name: block and rescue for multiple attempts
    block:
    - name: Add groups
      when: item == "inventory" and add_groups
      ansible.builtin.include_role:
        name: groups
      loop: "{{ export_objects }}"
    rescue:
    - name: Add groups - second attempt
      ansible.builtin.include_role:
        name: groups

  - name: block and rescue for multiple attempts
    block:
    - name: Add applications
      when: item == "applications"
      ansible.builtin.include_role:
        name: applications
      loop: "{{ export_objects }}"
    rescue:
    - name: Add applications - second attempt
      ansible.builtin.include_role:
        name: applications

  - name: block and rescue for multiple attempts
    block:
    - name: Add job_templates
      when: item == "job_templates"
      ansible.builtin.include_role:
        name: job_templates
      loop: "{{ export_objects }}"
    rescue:
    - name: Add job_templates - second attempt
      ansible.builtin.include_role:
        name: job_templates

  - name: block and rescue for multiple attempts
    block:
    - name: Add workflow_job_templates
      when: item == "workflow_job_templates"
      ansible.builtin.include_role:
        name: workflow_job_templates
      loop: "{{ export_objects }}"
    rescue:
    - name: Add workflow_job_templates - second attempt
      ansible.builtin.include_role:
        name: workflow_job_templates

  - name: block and rescue for multiple attempts
    block:
    - name: Add notification_templates
      when: item == "notification_templates"
      ansible.builtin.include_role:
        name: notification_templates
      loop: "{{ export_objects }}"
    rescue:
    - name: Add notification_templates - second attempt
      ansible.builtin.include_role:
        name: notification_templates

  - name: block and rescue for multiple attempts
    block:
    - name: Add schedules
      when: item == "schedules"
      ansible.builtin.include_role:
        name: schedules
      loop: "{{ export_objects }}"
    rescue:
    - name: Add schedules - second attempt
      ansible.builtin.include_role:
        name: schedules

